AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >-



Parameters:
  AppId:
    Type: String

  Project:
    Description: nome do Project
    Type: String
    Default: BugReport

  Environment:
    Description: ambiente de execucao do servico
    Type: String
    AllowedValues:
      - dev
      - staging
      - prod

Conditions:
  Prod: !Equals [ !Ref Environment, prod ]

# https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: python3.7
    MemorySize: 1024
    Timeout: 120
    Environment:
      Variables:
        API_ENDPOINT: !If [ Prod, 'apibugs.pontte.com.br', !Sub ' http://127.0.0.1:3000' ]
    Tags:
      Project: !Ref Project
      Environment: !Ref Environment

#  PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AppId}-${AWS::Region}-PermissionsBoundary'

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  APIDomainName:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      DomainName:
        !If [ Prod, "apibugs.pontte.com.br", !Sub " http://127.0.0.1:3000" ]
      CertificateArn: "arn:aws:acm:us-east-1:848638426587:certificate/639f5ab2-c77a-4f62-8250-c85716a6753f"

  # Acessos para log
  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn


  BugReportApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "BugReportApi-${Environment}"
      StageName: !Ref Environment

  Deployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref BugReportApi
      Description: BugApi deployment
      StageName: "v1"

  BugReportApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: "BugReport"
      DomainName: !Ref APIDomainName
      RestApiId: !Ref BugReportApi
      Stage: !Ref Environment

  GetAllFn:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${Project}-GetAllFn-${Environment}"
      Description: Retorna um contrato.
      CodeUri: src/get_all
      Handler: GetAllFn.handler
      Tracing: Active
      Events:
        api1:
          Type: Api
          Properties:
            RestApiId: !Ref BugReportApi
            Path: "/v1/"
            Method: GET



    # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}

  BugReportsDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "BugReports.${Environment}"
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [ Prod, true, false ]
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      Tags:
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }

